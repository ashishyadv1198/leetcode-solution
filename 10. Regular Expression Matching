public class Solution {  // Rename the class to Solution

    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        
        // dp[i][j] will be true if s[0..i-1] matches p[0..j-1]
        boolean[][] dp = new boolean[m + 1][n + 1];
        
        // Base case: empty string matches empty pattern
        dp[0][0] = true;
        
        // Handle patterns like a*, a*b*, a*b*c* (patterns starting with *)
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2];  // '*' means 0 occurrence of the character before it
            }
        }

        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char c = s.charAt(i - 1);
                char pChar = p.charAt(j - 1);
                
                if (pChar == c || pChar == '.') {
                    // Match current character or '.'
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (pChar == '*') {
                    // Case 1: '*' means 0 occurrence of the character before it
                    dp[i][j] = dp[i][j - 2];
                    
                    // Case 2: '*' means 1 or more occurrences of the preceding character
                    if (p.charAt(j - 2) == c || p.charAt(j - 2) == '.') {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                }
            }
        }

        return dp[m][n];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Test cases
        System.out.println(solution.isMatch("aa", "a"));      // false
        System.out.println(solution.isMatch("aa", "a*"));     // true
        System.out.println(solution.isMatch("ab", ".*"));     // true
        System.out.println(solution.isMatch("mississippi", "mis*is*p*.")); // false
    }
}
