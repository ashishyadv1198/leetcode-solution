import java.util.HashMap;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> charIndexMap = new HashMap<>();
        int maxLength = 0;
        
        // Initialize left pointer
        int left = 0;

        for (int right = 0; right < s.length(); right++) {
            char currentChar = s.charAt(right);

            // If currentChar has been seen and is within the current window, move left pointer
            if (charIndexMap.containsKey(currentChar) && charIndexMap.get(currentChar) >= left) {
                left = charIndexMap.get(currentChar) + 1;
            }

            // Update the latest index of the currentChar in the map
            charIndexMap.put(currentChar, right);

            // Update maxLength with the size of the current window
            maxLength = Math.max(maxLength, right - left + 1);
        }

        return maxLength;
    }
}
